// Mocks generated by Mockito 5.4.4 from annotations
// in frontend/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;

import 'package:bloc/bloc.dart' as _i15;
import 'package:frontend/application/appointment/bloc/appointment_bloc.dart'
    as _i18;
import 'package:frontend/application/appointment/bloc/appointment_event.dart'
    as _i19;
import 'package:frontend/application/appointment/bloc/appointment_state.dart'
    as _i7;
import 'package:frontend/application/comment/bloc/comment_bloc.dart' as _i22;
import 'package:frontend/application/comment/bloc/comment_event.dart' as _i23;
import 'package:frontend/application/comment/bloc/comment_state.dart' as _i11;
import 'package:frontend/application/note/bloc/note_bloc.dart' as _i12;
import 'package:frontend/application/note/bloc/note_event.dart' as _i14;
import 'package:frontend/application/note/bloc/note_state.dart' as _i3;
import 'package:frontend/application/post/post_list/bloc/post_list_bloc.dart'
    as _i16;
import 'package:frontend/application/post/post_list/bloc/post_list_events.dart'
    as _i17;
import 'package:frontend/application/post/post_list/bloc/post_list_state.dart'
    as _i5;
import 'package:frontend/application/profile/bloc/profile_bloc.dart' as _i20;
import 'package:frontend/application/profile/bloc/profile_event.dart' as _i21;
import 'package:frontend/application/profile/bloc/profile_state.dart' as _i9;
import 'package:frontend/domain/appointment/appointment.dart' as _i6;
import 'package:frontend/domain/comment/comment.dart' as _i10;
import 'package:frontend/domain/note/note.dart' as _i2;
import 'package:frontend/domain/post/post.dart' as _i4;
import 'package:frontend/domain/profile/profile.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNoteRepositoryInterface_0 extends _i1.SmartFake
    implements _i2.NoteRepositoryInterface {
  _FakeNoteRepositoryInterface_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNoteState_1 extends _i1.SmartFake implements _i3.NoteState {
  _FakeNoteState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostRepositoryInterface_2 extends _i1.SmartFake
    implements _i4.PostRepositoryInterface {
  _FakePostRepositoryInterface_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostListState_3 extends _i1.SmartFake implements _i5.PostListState {
  _FakePostListState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppointmentRepositoryInterface_4 extends _i1.SmartFake
    implements _i6.AppointmentRepositoryInterface {
  _FakeAppointmentRepositoryInterface_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppointmentState_5 extends _i1.SmartFake
    implements _i7.AppointmentState {
  _FakeAppointmentState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProfileRepositoryInterface_6 extends _i1.SmartFake
    implements _i8.ProfileRepositoryInterface {
  _FakeProfileRepositoryInterface_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProfileState_7 extends _i1.SmartFake implements _i9.ProfileState {
  _FakeProfileState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCommentRepositoryInterface_8 extends _i1.SmartFake
    implements _i10.CommentRepositoryInterface {
  _FakeCommentRepositoryInterface_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCommentState_9 extends _i1.SmartFake implements _i11.CommentState {
  _FakeCommentState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteBloc extends _i1.Mock implements _i12.NoteBloc {
  MockNoteBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NoteRepositoryInterface get noteRepositoryInterface =>
      (super.noSuchMethod(
        Invocation.getter(#noteRepositoryInterface),
        returnValue: _FakeNoteRepositoryInterface_0(
          this,
          Invocation.getter(#noteRepositoryInterface),
        ),
      ) as _i2.NoteRepositoryInterface);

  @override
  _i3.NoteState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNoteState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.NoteState);

  @override
  _i13.Stream<_i3.NoteState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i3.NoteState>.empty(),
      ) as _i13.Stream<_i3.NoteState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i14.NoteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i14.NoteEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.NoteState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i14.NoteEvent>(
    _i15.EventHandler<E, _i3.NoteState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i15.Transition<_i14.NoteEvent, _i3.NoteState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i15.Change<_i3.NoteState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PostListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostListBloc extends _i1.Mock implements _i16.PostListBloc {
  MockPostListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PostRepositoryInterface get postRepository => (super.noSuchMethod(
        Invocation.getter(#postRepository),
        returnValue: _FakePostRepositoryInterface_2(
          this,
          Invocation.getter(#postRepository),
        ),
      ) as _i4.PostRepositoryInterface);

  @override
  _i5.PostListState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePostListState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.PostListState);

  @override
  _i13.Stream<_i5.PostListState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i5.PostListState>.empty(),
      ) as _i13.Stream<_i5.PostListState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i17.PostListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i17.PostListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.PostListState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i17.PostListEvent>(
    _i15.EventHandler<E, _i5.PostListState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i15.Transition<_i17.PostListEvent, _i5.PostListState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i15.Change<_i5.PostListState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppointmentBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppointmentBloc extends _i1.Mock implements _i18.AppointmentBloc {
  MockAppointmentBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AppointmentRepositoryInterface get appointmentRepositoryInterface =>
      (super.noSuchMethod(
        Invocation.getter(#appointmentRepositoryInterface),
        returnValue: _FakeAppointmentRepositoryInterface_4(
          this,
          Invocation.getter(#appointmentRepositoryInterface),
        ),
      ) as _i6.AppointmentRepositoryInterface);

  @override
  _i7.AppointmentState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAppointmentState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.AppointmentState);

  @override
  _i13.Stream<_i7.AppointmentState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i7.AppointmentState>.empty(),
      ) as _i13.Stream<_i7.AppointmentState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i19.AppointmentEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i19.AppointmentEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.AppointmentState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i19.AppointmentEvent>(
    _i15.EventHandler<E, _i7.AppointmentState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i15.Transition<_i19.AppointmentEvent, _i7.AppointmentState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i15.Change<_i7.AppointmentState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ProfileBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileBloc extends _i1.Mock implements _i20.ProfileBloc {
  MockProfileBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.ProfileRepositoryInterface get profileRepositoryInterface =>
      (super.noSuchMethod(
        Invocation.getter(#profileRepositoryInterface),
        returnValue: _FakeProfileRepositoryInterface_6(
          this,
          Invocation.getter(#profileRepositoryInterface),
        ),
      ) as _i8.ProfileRepositoryInterface);

  @override
  _i9.ProfileState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeProfileState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.ProfileState);

  @override
  _i13.Stream<_i9.ProfileState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i9.ProfileState>.empty(),
      ) as _i13.Stream<_i9.ProfileState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i21.ProfileEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i21.ProfileEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i9.ProfileState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i21.ProfileEvent>(
    _i15.EventHandler<E, _i9.ProfileState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i15.Transition<_i21.ProfileEvent, _i9.ProfileState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i15.Change<_i9.ProfileState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CommentBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentBloc extends _i1.Mock implements _i22.CommentBloc {
  MockCommentBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.CommentRepositoryInterface get commentRepositoryInterface =>
      (super.noSuchMethod(
        Invocation.getter(#commentRepositoryInterface),
        returnValue: _FakeCommentRepositoryInterface_8(
          this,
          Invocation.getter(#commentRepositoryInterface),
        ),
      ) as _i10.CommentRepositoryInterface);

  @override
  _i11.CommentState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCommentState_9(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.CommentState);

  @override
  _i13.Stream<_i11.CommentState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i11.CommentState>.empty(),
      ) as _i13.Stream<_i11.CommentState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i23.CommentEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i23.CommentEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i11.CommentState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i23.CommentEvent>(
    _i15.EventHandler<E, _i11.CommentState>? handler, {
    _i15.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i15.Transition<_i23.CommentEvent, _i11.CommentState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i15.Change<_i11.CommentState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
